{"ast":null,"code":"var _jsxFileName = \"/Users/mdhi2/Documents/web/front/webpages/src/pages/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TextInput({\n  init\n}) {\n  _s();\n\n  const ref = useRef(null);\n  const [text, setText] = useState(init);\n  const [editable, setEditable] = useState(false);\n\n  const editOn = () => {\n    setEditable(true);\n  };\n\n  const handleChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      setEditable(!editable);\n    }\n  };\n\n  const handleClickOutside = e => {\n    if (editable == true && !ref.current.contains(e.target)) setEditable(false);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"click\", handleClickOutside, true);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      children: editable ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: text,\n        onChange: e => handleChange(e),\n        onKeyDown: handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => editOn(),\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(TextInput, \"8C9WoC2on53VBL1sigBEaWV9w8Q=\");\n\n_c = TextInput;\nexport default TextInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"sources":["/Users/mdhi2/Documents/web/front/webpages/src/pages/Dashboard.js"],"names":["React","useState","useEffect","useRef","TextInput","init","ref","text","setText","editable","setEditable","editOn","handleChange","e","target","value","handleKeyDown","key","handleClickOutside","current","contains","window","addEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;;AAMA,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA6C;AAAA;;AAC3C,QAAMC,GAAG,GAAGH,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACI,IAAD,CAAhC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;;AACA,QAAMU,MAAM,GAAG,MAAM;AACnBD,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;;AAGA,QAAME,YAAY,GAAIC,CAAD,IAAO;AAC1BL,IAAAA,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GAFD;;AAGA,QAAMC,aAAa,GAAIH,CAAD,IAAO;AAC3B,QAAIA,CAAC,CAACI,GAAF,KAAU,OAAd,EAAuB;AACrBP,MAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD;AACF,GAJD;;AAKA,QAAMS,kBAAkB,GAAIL,CAAD,IAAO;AAChC,QAAIJ,QAAQ,IAAI,IAAZ,IAAoB,CAACH,GAAG,CAACa,OAAJ,CAAYC,QAAZ,CAAqBP,CAAC,CAACC,MAAvB,CAAzB,EAAyDJ,WAAW,CAAC,KAAD,CAAX;AAC1D,GAFD;;AAGAR,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCJ,kBAAjC,EAAqD,IAArD;AACD,GAFQ,CAAT;AAGA,sBACE;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEZ,GAAV;AAAA,gBACGG,QAAQ,gBACP;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAEF,IAA1B;AAAgC,QAAA,QAAQ,EAAGM,CAAD,IAAOD,YAAY,CAACC,CAAD,CAA7D;AAAkE,QAAA,SAAS,EAAEG;AAA7E;AAAA;AAAA;AAAA;AAAA,cADO,gBAGP;AAAK,QAAA,OAAO,EAAE,MAAML,MAAM,EAA1B;AAAA,kBAA+BJ;AAA/B;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAWD;;GAhCQH,S;;KAAAA,S;AAkCT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\ninterface TextInputProps {\n  init: string;\n}\n\nfunction TextInput({ init }: TextInputProps) {\n  const ref = useRef(null);\n  const [text, setText] = useState(init);\n  const [editable, setEditable] = useState(false);\n  const editOn = () => {\n    setEditable(true);\n  };\n  const handleChange = (e) => {\n    setText(e.target.value);\n  };\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      setEditable(!editable);\n    }\n  };\n  const handleClickOutside = (e) => {\n    if (editable == true && !ref.current.contains(e.target)) setEditable(false);\n  };\n  useEffect(() => {\n    window.addEventListener(\"click\", handleClickOutside, true);\n  });\n  return (\n    <>\n      <div ref={ref}>\n        {editable ? (\n          <input type=\"text\" value={text} onChange={(e) => handleChange(e)} onKeyDown={handleKeyDown} />\n        ) : (\n          <div onClick={() => editOn()}>{text}</div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}